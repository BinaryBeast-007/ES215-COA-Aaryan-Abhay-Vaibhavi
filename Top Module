module TopModule(input [7:0]IR, input p1, input p2, input p3, input p4, output reg [15:0]result, input [2:0] instype, input reset, input clk, input [1:0]display );

wire   [31:0]D1out;
reg [31:0] Instruction;
reg [29:0] PC;
wire   [31:0]D2out;
reg   [5:0] ALUCtrl;
reg [31:0] nextPCcontents;
reg [4:0] RD;
reg [31:0] op1;
reg [31:0] op2;
wire [31:0]ALUout3;
reg [31:0] Din;
reg WE;

reg_file M1(WE,Din,RD,Instruction[25:21], Instruction [20:16],  D1out, D2out,reset, clk,isRS1zero);
ALU M2(reset,isRS1zero,ALUCtrl, op1, op2, ALUout3) ;

always@(reset,clk) begin
   if (reset) begin 
   Instruction=0;
   result=0; 
   PC=30'b000000000000000000000000000001;
   end
   else
   if(p1) Instruction[31:24]= IR[7:0];
   else if(p2) Instruction[23:16]= IR[7:0];
   else if(p3) Instruction[15:8]= IR[7:0];
   else if (p4) Instruction[7:0]= IR[7:0];
    case(instype)
        3'b000: ALUCtrl=Instruction[5:0]; // R Triadic
        3'b001: ALUCtrl=Instruction[31:26]; // R-I Triadic
        3'b010: ALUCtrl=Instruction[31:26]; // BEQZ/BNEZ
        3'b011: ALUCtrl=Instruction[31:26]; // JR
        3'b100: ALUCtrl=Instruction[31:26]; // JALR
        
    endcase
    
    case(instype)
        3'b000: RD = Instruction[15:11];
        3'b001: RD = Instruction[20:16];
        3'b100: RD = 5'b11111;
        
    endcase
    
    case(instype)
        3'b000: op2=D2out;
        3'b001: op2= {16'b0000000000000000, Instruction[15:0]};
       
        3'b010: op2= {14'b00000000000000, Instruction[15:0], 2'b00};
       
        3'b011: op2= {4'b0000, Instruction[25:0],2'b00};
        3'b100: op2= {4'b0000, Instruction[25:0],2'b00};    
       
        
    endcase
    
    case(instype)
        3'b000: op1= D1out;
        3'b001: op1= D1out;
        3'b010: op1=  (PC)<<2;
        3'b011: op1 = (PC)<<2;
        3'b100: op1 = (PC)<<2;
    endcase
    
    case(instype)
    
        3'b000: nextPCcontents = (PC +1)<<2;
        3'b001: nextPCcontents = (PC +1)<<2 ;
        3'b010: nextPCcontents = ALUout3;
        3'b011: nextPCcontents = ALUout3;
        3'b100: nextPCcontents = ALUout3;
    endcase
    
        
    case(instype)
        3'b000: WE = 1;
        3'b001: WE = 1;
        3'b010: WE=  0;
        3'b011: WE=  0;
        3'b100: WE=  1;
    endcase

    

  if (display==1) begin
        case(instype)
        3'b000: result = ALUout3[15:0];
        3'b001: result = ALUout3[15:0];
        3'b010: result = nextPCcontents[15:0];
        3'b011: result = nextPCcontents[15:0];
        3'b100: result = nextPCcontents[15:0];
    endcase
        case(instype)
        3'b100: Din = (PC+2)<<2;
        default: Din=ALUout3;
        endcase
    end
  if (display==2) begin
        case(instype)
        3'b000: result = ALUout3[31:16];
        3'b001: result = ALUout3[31:16];
        3'b010: result = nextPCcontents[31:16];
        3'b011: result = nextPCcontents[31:16];
        3'b100: result = nextPCcontents[31:16];
    endcase
    end
end

endmodule
